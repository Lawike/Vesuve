#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 0, set = 1) uniform UniformBufferObject {
	mat4 view;
	mat4 invView;
	mat4 proj;
	mat4 invProj;
	mat4 viewproj;
	vec4 ambientColor;
	vec4 cameraPosition;
	vec4 lightPosition;
	vec4 lightColor;
	float lightPower;
	float specularCoefficient;
	float ambientCoefficient;
	float shininess;
	float screenGamma;
	float aspectRatio;
	uint frameIndex;
} ubo;

layout(location = 0) rayPayloadEXT hitPayload prd;

const int NBSAMPLES = 10;

void main() 
{
    vec3 hitValues = vec3(0);
    for(int smpl = 0; smpl < NBSAMPLES; smpl++)
    {
        // Initialize the random number generator
        uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, ubo.frameIndex);
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = ubo.frameIndex == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin    = ubo.invView * vec4(0, 0, 0, 1);
        vec4 target    = ubo.invProj * vec4(d.x, d.y, 1.0, 1.0);
        vec4 direction = ubo.invView * vec4(normalize(target.xyz), 0);
        uint  rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.1;
        float tMax     = 1000.0;
        traceRayEXT(topLevelAS, // acceleration structure
              rayFlags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              tMin,           // ray min range
              direction.xyz,  // ray direction
              tMax,           // ray max range
              0               // payload (location = 0)
        );
        hitValues += prd.hitValue;
    }
    prd.hitValue = hitValues / NBSAMPLES;

    // Do accumulation over time
    if(ubo.frameIndex > 0)
    {
      float a         = 1.0f / float(ubo.frameIndex + 1);
      vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
      imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix( old_color, prd.hitValue, a), 1.f));
    }
    else
    {
      // First frame, replace the value in the buffer
      imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
    }
}